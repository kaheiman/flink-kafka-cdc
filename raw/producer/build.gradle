buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
    }
}

plugins {
    id 'com.github.davidmc24.gradle.plugin.avro' version '1.9.1' // Add this
    id "java"
    id "idea"
    id "eclipse"
}

sourceCompatibility = "1.11"
targetCompatibility = "1.11"
version = "0.0.1"


// In Gradle, the repositories block tells Gradle where to find the dependencies listed in your dependencies block.
// Custom (e.g. Confluent)	e.g., https://packages.confluent.io/maven	Only needed if using vendor-specific packages
repositories {
    mavenCentral()

    maven {
        url "https://packages.confluent.io/maven"
    }    
}


// Plugins ≠ dependencies — they're build tools, not runtime libraries.
// You don't include plugins in dependencies {} — you register them using:
// plugins {} — for modern plugin syntax, or
// apply plugin: — older but still supported, especially for community plugins
// But this only works for plugins published to the Gradle Plugin Portal. If you're using an older version of Gradle or a plugin not in the portal, you fall back to:
// groovy
// Copy
// Edit
// buildscript {
//     dependencies {
//         classpath "gradle.plugin.com.github.jengelman.gradle.plugins:shadow:7.0.0"
//     }
// }
// apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "com.github.johnrengelman.shadow"

dependencies {
    implementation 'io.confluent:kafka-avro-serializer:7.2.1'
    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.3'
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '3.3.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.15.2'
}


// This matches Gradle's standard Java project layout, which is:
// project-root/
// ├── build.gradle
// └── src/
//     └── main/
//         └── java/
//             └── your/package/structure/
//                 └── MainClass.java
jar {
    manifest {
        attributes(
                "Class-Path": configurations.compileClasspath.collect { it.getName() }.join(" "),
                // "Main-Class": "io.confluent.developer.ProducerExample"
        )
    }
}

shadowJar {
    archiveBaseName = "kafka-java-getting-started"
    archiveClassifier = ''
}

