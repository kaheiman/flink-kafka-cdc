/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package marcus.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AssignmentCdcEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6890943167708693253L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AssignmentCdcEvent\",\"namespace\":\"marcus.avro\",\"fields\":[{\"name\":\"before\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"Assignment\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"poolKey\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"poolType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"subjectId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"subjectType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"subscriberContextId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"subscriptionIdentifier\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"assignmentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"enabled\",\"type\":\"boolean\",\"default\":true},{\"name\":\"createdAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"updatedAt\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"createdBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"updatedBy\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"utsMigrationId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}],\"default\":null},{\"name\":\"after\",\"type\":[\"null\",\"Assignment\"],\"default\":null},{\"name\":\"op\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ts_ms\",\"type\":[\"null\",\"long\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<AssignmentCdcEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AssignmentCdcEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AssignmentCdcEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AssignmentCdcEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AssignmentCdcEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AssignmentCdcEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AssignmentCdcEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AssignmentCdcEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AssignmentCdcEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private marcus.avro.Assignment before;
  private marcus.avro.Assignment after;
  private java.lang.String op;
  private java.lang.Long ts_ms;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AssignmentCdcEvent() {}

  /**
   * All-args constructor.
   * @param before The new value for before
   * @param after The new value for after
   * @param op The new value for op
   * @param ts_ms The new value for ts_ms
   */
  public AssignmentCdcEvent(marcus.avro.Assignment before, marcus.avro.Assignment after, java.lang.String op, java.lang.Long ts_ms) {
    this.before = before;
    this.after = after;
    this.op = op;
    this.ts_ms = ts_ms;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return before;
    case 1: return after;
    case 2: return op;
    case 3: return ts_ms;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: before = (marcus.avro.Assignment)value$; break;
    case 1: after = (marcus.avro.Assignment)value$; break;
    case 2: op = value$ != null ? value$.toString() : null; break;
    case 3: ts_ms = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'before' field.
   * @return The value of the 'before' field.
   */
  public marcus.avro.Assignment getBefore() {
    return before;
  }


  /**
   * Sets the value of the 'before' field.
   * @param value the value to set.
   */
  public void setBefore(marcus.avro.Assignment value) {
    this.before = value;
  }

  /**
   * Gets the value of the 'after' field.
   * @return The value of the 'after' field.
   */
  public marcus.avro.Assignment getAfter() {
    return after;
  }


  /**
   * Sets the value of the 'after' field.
   * @param value the value to set.
   */
  public void setAfter(marcus.avro.Assignment value) {
    this.after = value;
  }

  /**
   * Gets the value of the 'op' field.
   * @return The value of the 'op' field.
   */
  public java.lang.String getOp() {
    return op;
  }


  /**
   * Sets the value of the 'op' field.
   * @param value the value to set.
   */
  public void setOp(java.lang.String value) {
    this.op = value;
  }

  /**
   * Gets the value of the 'ts_ms' field.
   * @return The value of the 'ts_ms' field.
   */
  public java.lang.Long getTsMs() {
    return ts_ms;
  }


  /**
   * Sets the value of the 'ts_ms' field.
   * @param value the value to set.
   */
  public void setTsMs(java.lang.Long value) {
    this.ts_ms = value;
  }

  /**
   * Creates a new AssignmentCdcEvent RecordBuilder.
   * @return A new AssignmentCdcEvent RecordBuilder
   */
  public static marcus.avro.AssignmentCdcEvent.Builder newBuilder() {
    return new marcus.avro.AssignmentCdcEvent.Builder();
  }

  /**
   * Creates a new AssignmentCdcEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AssignmentCdcEvent RecordBuilder
   */
  public static marcus.avro.AssignmentCdcEvent.Builder newBuilder(marcus.avro.AssignmentCdcEvent.Builder other) {
    if (other == null) {
      return new marcus.avro.AssignmentCdcEvent.Builder();
    } else {
      return new marcus.avro.AssignmentCdcEvent.Builder(other);
    }
  }

  /**
   * Creates a new AssignmentCdcEvent RecordBuilder by copying an existing AssignmentCdcEvent instance.
   * @param other The existing instance to copy.
   * @return A new AssignmentCdcEvent RecordBuilder
   */
  public static marcus.avro.AssignmentCdcEvent.Builder newBuilder(marcus.avro.AssignmentCdcEvent other) {
    if (other == null) {
      return new marcus.avro.AssignmentCdcEvent.Builder();
    } else {
      return new marcus.avro.AssignmentCdcEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for AssignmentCdcEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AssignmentCdcEvent>
    implements org.apache.avro.data.RecordBuilder<AssignmentCdcEvent> {

    private marcus.avro.Assignment before;
    private marcus.avro.Assignment.Builder beforeBuilder;
    private marcus.avro.Assignment after;
    private marcus.avro.Assignment.Builder afterBuilder;
    private java.lang.String op;
    private java.lang.Long ts_ms;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(marcus.avro.AssignmentCdcEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.before)) {
        this.before = data().deepCopy(fields()[0].schema(), other.before);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasBeforeBuilder()) {
        this.beforeBuilder = marcus.avro.Assignment.newBuilder(other.getBeforeBuilder());
      }
      if (isValidValue(fields()[1], other.after)) {
        this.after = data().deepCopy(fields()[1].schema(), other.after);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasAfterBuilder()) {
        this.afterBuilder = marcus.avro.Assignment.newBuilder(other.getAfterBuilder());
      }
      if (isValidValue(fields()[2], other.op)) {
        this.op = data().deepCopy(fields()[2].schema(), other.op);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.ts_ms)) {
        this.ts_ms = data().deepCopy(fields()[3].schema(), other.ts_ms);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing AssignmentCdcEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(marcus.avro.AssignmentCdcEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.before)) {
        this.before = data().deepCopy(fields()[0].schema(), other.before);
        fieldSetFlags()[0] = true;
      }
      this.beforeBuilder = null;
      if (isValidValue(fields()[1], other.after)) {
        this.after = data().deepCopy(fields()[1].schema(), other.after);
        fieldSetFlags()[1] = true;
      }
      this.afterBuilder = null;
      if (isValidValue(fields()[2], other.op)) {
        this.op = data().deepCopy(fields()[2].schema(), other.op);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ts_ms)) {
        this.ts_ms = data().deepCopy(fields()[3].schema(), other.ts_ms);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'before' field.
      * @return The value.
      */
    public marcus.avro.Assignment getBefore() {
      return before;
    }


    /**
      * Sets the value of the 'before' field.
      * @param value The value of 'before'.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder setBefore(marcus.avro.Assignment value) {
      validate(fields()[0], value);
      this.beforeBuilder = null;
      this.before = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'before' field has been set.
      * @return True if the 'before' field has been set, false otherwise.
      */
    public boolean hasBefore() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'before' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public marcus.avro.Assignment.Builder getBeforeBuilder() {
      if (beforeBuilder == null) {
        if (hasBefore()) {
          setBeforeBuilder(marcus.avro.Assignment.newBuilder(before));
        } else {
          setBeforeBuilder(marcus.avro.Assignment.newBuilder());
        }
      }
      return beforeBuilder;
    }

    /**
     * Sets the Builder instance for the 'before' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public marcus.avro.AssignmentCdcEvent.Builder setBeforeBuilder(marcus.avro.Assignment.Builder value) {
      clearBefore();
      beforeBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'before' field has an active Builder instance
     * @return True if the 'before' field has an active Builder instance
     */
    public boolean hasBeforeBuilder() {
      return beforeBuilder != null;
    }

    /**
      * Clears the value of the 'before' field.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder clearBefore() {
      before = null;
      beforeBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'after' field.
      * @return The value.
      */
    public marcus.avro.Assignment getAfter() {
      return after;
    }


    /**
      * Sets the value of the 'after' field.
      * @param value The value of 'after'.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder setAfter(marcus.avro.Assignment value) {
      validate(fields()[1], value);
      this.afterBuilder = null;
      this.after = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'after' field has been set.
      * @return True if the 'after' field has been set, false otherwise.
      */
    public boolean hasAfter() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'after' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public marcus.avro.Assignment.Builder getAfterBuilder() {
      if (afterBuilder == null) {
        if (hasAfter()) {
          setAfterBuilder(marcus.avro.Assignment.newBuilder(after));
        } else {
          setAfterBuilder(marcus.avro.Assignment.newBuilder());
        }
      }
      return afterBuilder;
    }

    /**
     * Sets the Builder instance for the 'after' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public marcus.avro.AssignmentCdcEvent.Builder setAfterBuilder(marcus.avro.Assignment.Builder value) {
      clearAfter();
      afterBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'after' field has an active Builder instance
     * @return True if the 'after' field has an active Builder instance
     */
    public boolean hasAfterBuilder() {
      return afterBuilder != null;
    }

    /**
      * Clears the value of the 'after' field.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder clearAfter() {
      after = null;
      afterBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'op' field.
      * @return The value.
      */
    public java.lang.String getOp() {
      return op;
    }


    /**
      * Sets the value of the 'op' field.
      * @param value The value of 'op'.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder setOp(java.lang.String value) {
      validate(fields()[2], value);
      this.op = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'op' field has been set.
      * @return True if the 'op' field has been set, false otherwise.
      */
    public boolean hasOp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'op' field.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder clearOp() {
      op = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts_ms' field.
      * @return The value.
      */
    public java.lang.Long getTsMs() {
      return ts_ms;
    }


    /**
      * Sets the value of the 'ts_ms' field.
      * @param value The value of 'ts_ms'.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder setTsMs(java.lang.Long value) {
      validate(fields()[3], value);
      this.ts_ms = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ts_ms' field has been set.
      * @return True if the 'ts_ms' field has been set, false otherwise.
      */
    public boolean hasTsMs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ts_ms' field.
      * @return This builder.
      */
    public marcus.avro.AssignmentCdcEvent.Builder clearTsMs() {
      ts_ms = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AssignmentCdcEvent build() {
      try {
        AssignmentCdcEvent record = new AssignmentCdcEvent();
        if (beforeBuilder != null) {
          try {
            record.before = this.beforeBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("before"));
            throw e;
          }
        } else {
          record.before = fieldSetFlags()[0] ? this.before : (marcus.avro.Assignment) defaultValue(fields()[0]);
        }
        if (afterBuilder != null) {
          try {
            record.after = this.afterBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("after"));
            throw e;
          }
        } else {
          record.after = fieldSetFlags()[1] ? this.after : (marcus.avro.Assignment) defaultValue(fields()[1]);
        }
        record.op = fieldSetFlags()[2] ? this.op : (java.lang.String) defaultValue(fields()[2]);
        record.ts_ms = fieldSetFlags()[3] ? this.ts_ms : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AssignmentCdcEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<AssignmentCdcEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AssignmentCdcEvent>
    READER$ = (org.apache.avro.io.DatumReader<AssignmentCdcEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










